name: Automated Deployment

on:
  push:
    branches: [ main ]
    paths:
      - "web/**"
  workflow_dispatch:

jobs:
  build:
    name: Build and push to Docker
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Actix-web server
        uses: docker/build-push-action@v5
        with:
          context: ./web/server
          push: true
          tags: jangryga/clockwork-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Nginx
        working-directory: ./web/nginx
        run: |
          docker buildx build --tag jangryga/clockwork-balancer:latest --push .
  
  deploy:
    name: Deploy to Linode
    runs-on: ubuntu-22.04
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on Linode
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE_NAME: ${{ secrets.DB_DATABASE_NAME }}
        run: |
          scp  -o StrictHostKeyChecking=no -r ./web/docker-compose.yaml root@${{ secrets.LINODE_IP_ADDRESS }}:/app
          ssh -o StrictHostKeyChecking=no root@${{ secrets.LINODE_IP_ADDRESS }} << 'ENDSSH'
            cd /app
            export DB_HOST=${DB_HOST}
            export DB_USERNAME=${DB_USERNAME}
            export DB_PASSWORD=${DB_PASSWORD}
            export DB_DATABASE_NAME=${DB_DATABASE_NAME}
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker compose pull 
            docker compose up -d
          ENDSSH
      - name: Update client
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        working-directory: ./web/client
        run: |
          npm install
          npm run build
          ssh -o StrictHostKeyChecking=no root@${{ secrets.LINODE_IP_ADDRESS }} "rm -rf /var/www/skillstech.app/*"
          scp  -o StrictHostKeyChecking=no -r ./dist/* root@${{ secrets.LINODE_IP_ADDRESS }}:/var/www/skillstech.app/
